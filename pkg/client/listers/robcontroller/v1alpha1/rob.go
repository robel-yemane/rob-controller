/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robel-yemane/rob-controller/pkg/apis/robcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RobLister helps list Robs.
type RobLister interface {
	// List lists all Robs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Rob, err error)
	// Robs returns an object that can list and get Robs.
	Robs(namespace string) RobNamespaceLister
	RobListerExpansion
}

// robLister implements the RobLister interface.
type robLister struct {
	indexer cache.Indexer
}

// NewRobLister returns a new RobLister.
func NewRobLister(indexer cache.Indexer) RobLister {
	return &robLister{indexer: indexer}
}

// List lists all Robs in the indexer.
func (s *robLister) List(selector labels.Selector) (ret []*v1alpha1.Rob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rob))
	})
	return ret, err
}

// Robs returns an object that can list and get Robs.
func (s *robLister) Robs(namespace string) RobNamespaceLister {
	return robNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RobNamespaceLister helps list and get Robs.
type RobNamespaceLister interface {
	// List lists all Robs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Rob, err error)
	// Get retrieves the Rob from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Rob, error)
	RobNamespaceListerExpansion
}

// robNamespaceLister implements the RobNamespaceLister
// interface.
type robNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Robs in the indexer for a given namespace.
func (s robNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Rob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rob))
	})
	return ret, err
}

// Get retrieves the Rob from the indexer for a given namespace and name.
func (s robNamespaceLister) Get(name string) (*v1alpha1.Rob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rob"), name)
	}
	return obj.(*v1alpha1.Rob), nil
}
